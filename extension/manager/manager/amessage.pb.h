// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: amessage.proto

#ifndef PROTOBUF_amessage_2eproto__INCLUDED
#define PROTOBUF_amessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_amessage_2eproto();
void protobuf_AssignDesc_amessage_2eproto();
void protobuf_ShutdownFile_amessage_2eproto();

class GetDeviceCommand;
class InstallCommand;
class CommandMessage;

// ===================================================================

class GetDeviceCommand : public ::google::protobuf::Message {
 public:
  GetDeviceCommand();
  virtual ~GetDeviceCommand();

  GetDeviceCommand(const GetDeviceCommand& from);

  inline GetDeviceCommand& operator=(const GetDeviceCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeviceCommand& default_instance();

  void Swap(GetDeviceCommand* other);

  // implements Message ----------------------------------------------

  GetDeviceCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDeviceCommand& from);
  void MergeFrom(const GetDeviceCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:GetDeviceCommand)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* message_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_amessage_2eproto();
  friend void protobuf_AssignDesc_amessage_2eproto();
  friend void protobuf_ShutdownFile_amessage_2eproto();

  void InitAsDefaultInstance();
  static GetDeviceCommand* default_instance_;
};
// -------------------------------------------------------------------

class InstallCommand : public ::google::protobuf::Message {
 public:
  InstallCommand();
  virtual ~InstallCommand();

  InstallCommand(const InstallCommand& from);

  inline InstallCommand& operator=(const InstallCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallCommand& default_instance();

  void Swap(InstallCommand* other);

  // implements Message ----------------------------------------------

  InstallCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstallCommand& from);
  void MergeFrom(const InstallCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:InstallCommand)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_amessage_2eproto();
  friend void protobuf_AssignDesc_amessage_2eproto();
  friend void protobuf_ShutdownFile_amessage_2eproto();

  void InitAsDefaultInstance();
  static InstallCommand* default_instance_;
};
// -------------------------------------------------------------------

class CommandMessage : public ::google::protobuf::Message {
 public:
  CommandMessage();
  virtual ~CommandMessage();

  CommandMessage(const CommandMessage& from);

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandMessage& default_instance();

  void Swap(CommandMessage* other);

  // implements Message ----------------------------------------------

  CommandMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandMessage& from);
  void MergeFrom(const CommandMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required .GetDeviceCommand result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::GetDeviceCommand& result() const;
  inline ::GetDeviceCommand* mutable_result();
  inline ::GetDeviceCommand* release_result();
  inline void set_allocated_result(::GetDeviceCommand* result);

  // @@protoc_insertion_point(class_scope:CommandMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GetDeviceCommand* result_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_amessage_2eproto();
  friend void protobuf_AssignDesc_amessage_2eproto();
  friend void protobuf_ShutdownFile_amessage_2eproto();

  void InitAsDefaultInstance();
  static CommandMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// GetDeviceCommand

// required int32 flag = 1;
inline bool GetDeviceCommand::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDeviceCommand::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDeviceCommand::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDeviceCommand::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GetDeviceCommand::flag() const {
  return flag_;
}
inline void GetDeviceCommand::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required string id = 2;
inline bool GetDeviceCommand::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDeviceCommand::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDeviceCommand::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDeviceCommand::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GetDeviceCommand::id() const {
  return *id_;
}
inline void GetDeviceCommand::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetDeviceCommand::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GetDeviceCommand::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetDeviceCommand::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* GetDeviceCommand::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetDeviceCommand::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string message = 3;
inline bool GetDeviceCommand::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetDeviceCommand::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetDeviceCommand::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetDeviceCommand::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& GetDeviceCommand::message() const {
  return *message_;
}
inline void GetDeviceCommand::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void GetDeviceCommand::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void GetDeviceCommand::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetDeviceCommand::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* GetDeviceCommand::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetDeviceCommand::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// InstallCommand

// required int32 flag = 1;
inline bool InstallCommand::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallCommand::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallCommand::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallCommand::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 InstallCommand::flag() const {
  return flag_;
}
inline void InstallCommand::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// required string message = 2;
inline bool InstallCommand::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallCommand::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallCommand::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallCommand::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& InstallCommand::message() const {
  return *message_;
}
inline void InstallCommand::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void InstallCommand::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void InstallCommand::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallCommand::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* InstallCommand::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InstallCommand::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommandMessage

// required int32 type = 1;
inline bool CommandMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CommandMessage::type() const {
  return type_;
}
inline void CommandMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required .GetDeviceCommand result = 2;
inline bool CommandMessage::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandMessage::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandMessage::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandMessage::clear_result() {
  if (result_ != NULL) result_->::GetDeviceCommand::Clear();
  clear_has_result();
}
inline const ::GetDeviceCommand& CommandMessage::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::GetDeviceCommand* CommandMessage::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::GetDeviceCommand;
  return result_;
}
inline ::GetDeviceCommand* CommandMessage::release_result() {
  clear_has_result();
  ::GetDeviceCommand* temp = result_;
  result_ = NULL;
  return temp;
}
inline void CommandMessage::set_allocated_result(::GetDeviceCommand* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_amessage_2eproto__INCLUDED
