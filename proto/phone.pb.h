// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phone.proto

#ifndef PROTOBUF_phone_2eproto__INCLUDED
#define PROTOBUF_phone_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bigit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_phone_2eproto();
void protobuf_AssignDesc_phone_2eproto();
void protobuf_ShutdownFile_phone_2eproto();

class DeviceInfo;
class StorageInfo;
class AppInfo;
class AppList;
class ResInfo;
class ResList;
class Person;
class Person_PhoneNumber;
class AddressBook;
class SMSInfo;
class SMSList;

enum Person_PhoneType {
  Person_PhoneType_MOBILE = 0,
  Person_PhoneType_HOME = 1,
  Person_PhoneType_WORK = 2
};
bool Person_PhoneType_IsValid(int value);
const Person_PhoneType Person_PhoneType_PhoneType_MIN = Person_PhoneType_MOBILE;
const Person_PhoneType Person_PhoneType_PhoneType_MAX = Person_PhoneType_WORK;
const int Person_PhoneType_PhoneType_ARRAYSIZE = Person_PhoneType_PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Person_PhoneType_descriptor();
inline const ::std::string& Person_PhoneType_Name(Person_PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Person_PhoneType_descriptor(), value);
}
inline bool Person_PhoneType_Parse(
    const ::std::string& name, Person_PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Person_PhoneType>(
    Person_PhoneType_descriptor(), name, value);
}
enum SMSInfo_SMSType {
  SMSInfo_SMSType_IN = 0,
  SMSInfo_SMSType_OUT = 1
};
bool SMSInfo_SMSType_IsValid(int value);
const SMSInfo_SMSType SMSInfo_SMSType_SMSType_MIN = SMSInfo_SMSType_IN;
const SMSInfo_SMSType SMSInfo_SMSType_SMSType_MAX = SMSInfo_SMSType_OUT;
const int SMSInfo_SMSType_SMSType_ARRAYSIZE = SMSInfo_SMSType_SMSType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SMSInfo_SMSType_descriptor();
inline const ::std::string& SMSInfo_SMSType_Name(SMSInfo_SMSType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SMSInfo_SMSType_descriptor(), value);
}
inline bool SMSInfo_SMSType_Parse(
    const ::std::string& name, SMSInfo_SMSType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SMSInfo_SMSType>(
    SMSInfo_SMSType_descriptor(), name, value);
}
// ===================================================================

class DeviceInfo : public ::google::protobuf::Message {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  void Swap(DeviceInfo* other);

  // implements Message ----------------------------------------------

  DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string sn = 2;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 2;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // required string cpu = 3;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 3;
  inline const ::std::string& cpu() const;
  inline void set_cpu(const ::std::string& value);
  inline void set_cpu(const char* value);
  inline void set_cpu(const char* value, size_t size);
  inline ::std::string* mutable_cpu();
  inline ::std::string* release_cpu();
  inline void set_allocated_cpu(::std::string* cpu);

  // required string brand = 4;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 4;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // required string model = 5;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 5;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // required string imei = 6;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 6;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // optional string mac = 7;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 7;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // @@protoc_insertion_point(class_scope:bigit.DeviceInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_cpu();
  inline void clear_has_cpu();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_mac();
  inline void clear_has_mac();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* sn_;
  ::std::string* cpu_;
  ::std::string* brand_;
  ::std::string* model_;
  ::std::string* imei_;
  ::std::string* mac_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class StorageInfo : public ::google::protobuf::Message {
 public:
  StorageInfo();
  virtual ~StorageInfo();

  StorageInfo(const StorageInfo& from);

  inline StorageInfo& operator=(const StorageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageInfo& default_instance();

  void Swap(StorageInfo* other);

  // implements Message ----------------------------------------------

  StorageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageInfo& from);
  void MergeFrom(const StorageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 total = 1;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 1;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // required int32 free = 2;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 2;
  inline ::google::protobuf::int32 free() const;
  inline void set_free(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bigit.StorageInfo)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_free();
  inline void clear_has_free();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 free_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static StorageInfo* default_instance_;
};
// -------------------------------------------------------------------

class AppInfo : public ::google::protobuf::Message {
 public:
  AppInfo();
  virtual ~AppInfo();

  AppInfo(const AppInfo& from);

  inline AppInfo& operator=(const AppInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppInfo& default_instance();

  void Swap(AppInfo* other);

  // implements Message ----------------------------------------------

  AppInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppInfo& from);
  void MergeFrom(const AppInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int32 location = 5;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 5;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);

  // required string icodata = 6;
  inline bool has_icodata() const;
  inline void clear_icodata();
  static const int kIcodataFieldNumber = 6;
  inline const ::std::string& icodata() const;
  inline void set_icodata(const ::std::string& value);
  inline void set_icodata(const char* value);
  inline void set_icodata(const char* value, size_t size);
  inline ::std::string* mutable_icodata();
  inline ::std::string* release_icodata();
  inline void set_allocated_icodata(::std::string* icodata);

  // @@protoc_insertion_point(class_scope:bigit.AppInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_icodata();
  inline void clear_has_icodata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_;
  ::std::string* version_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 location_;
  ::std::string* icodata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static AppInfo* default_instance_;
};
// -------------------------------------------------------------------

class AppList : public ::google::protobuf::Message {
 public:
  AppList();
  virtual ~AppList();

  AppList(const AppList& from);

  inline AppList& operator=(const AppList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppList& default_instance();

  void Swap(AppList* other);

  // implements Message ----------------------------------------------

  AppList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppList& from);
  void MergeFrom(const AppList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigit.AppInfo app = 1;
  inline int app_size() const;
  inline void clear_app();
  static const int kAppFieldNumber = 1;
  inline const ::bigit::AppInfo& app(int index) const;
  inline ::bigit::AppInfo* mutable_app(int index);
  inline ::bigit::AppInfo* add_app();
  inline const ::google::protobuf::RepeatedPtrField< ::bigit::AppInfo >&
      app() const;
  inline ::google::protobuf::RepeatedPtrField< ::bigit::AppInfo >*
      mutable_app();

  // @@protoc_insertion_point(class_scope:bigit.AppList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bigit::AppInfo > app_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static AppList* default_instance_;
};
// -------------------------------------------------------------------

class ResInfo : public ::google::protobuf::Message {
 public:
  ResInfo();
  virtual ~ResInfo();

  ResInfo(const ResInfo& from);

  inline ResInfo& operator=(const ResInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResInfo& default_instance();

  void Swap(ResInfo* other);

  // implements Message ----------------------------------------------

  ResInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResInfo& from);
  void MergeFrom(const ResInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required string icodata = 3;
  inline bool has_icodata() const;
  inline void clear_icodata();
  static const int kIcodataFieldNumber = 3;
  inline const ::std::string& icodata() const;
  inline void set_icodata(const ::std::string& value);
  inline void set_icodata(const char* value);
  inline void set_icodata(const char* value, size_t size);
  inline ::std::string* mutable_icodata();
  inline ::std::string* release_icodata();
  inline void set_allocated_icodata(::std::string* icodata);

  // optional string createdate = 4;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreatedateFieldNumber = 4;
  inline const ::std::string& createdate() const;
  inline void set_createdate(const ::std::string& value);
  inline void set_createdate(const char* value);
  inline void set_createdate(const char* value, size_t size);
  inline ::std::string* mutable_createdate();
  inline ::std::string* release_createdate();
  inline void set_allocated_createdate(::std::string* createdate);

  // optional int32 duration = 5;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 5;
  inline ::google::protobuf::int32 duration() const;
  inline void set_duration(::google::protobuf::int32 value);

  // optional string author = 6;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 6;
  inline const ::std::string& author() const;
  inline void set_author(const ::std::string& value);
  inline void set_author(const char* value);
  inline void set_author(const char* value, size_t size);
  inline ::std::string* mutable_author();
  inline ::std::string* release_author();
  inline void set_allocated_author(::std::string* author);

  // optional string format = 7;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 7;
  inline const ::std::string& format() const;
  inline void set_format(const ::std::string& value);
  inline void set_format(const char* value);
  inline void set_format(const char* value, size_t size);
  inline ::std::string* mutable_format();
  inline ::std::string* release_format();
  inline void set_allocated_format(::std::string* format);

  // @@protoc_insertion_point(class_scope:bigit.ResInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_icodata();
  inline void clear_has_icodata();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_format();
  inline void clear_has_format();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::std::string* icodata_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 duration_;
  ::std::string* createdate_;
  ::std::string* author_;
  ::std::string* format_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static ResInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResList : public ::google::protobuf::Message {
 public:
  ResList();
  virtual ~ResList();

  ResList(const ResList& from);

  inline ResList& operator=(const ResList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResList& default_instance();

  void Swap(ResList* other);

  // implements Message ----------------------------------------------

  ResList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResList& from);
  void MergeFrom(const ResList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigit.ResInfo res = 1;
  inline int res_size() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline const ::bigit::ResInfo& res(int index) const;
  inline ::bigit::ResInfo* mutable_res(int index);
  inline ::bigit::ResInfo* add_res();
  inline const ::google::protobuf::RepeatedPtrField< ::bigit::ResInfo >&
      res() const;
  inline ::google::protobuf::RepeatedPtrField< ::bigit::ResInfo >*
      mutable_res();

  // @@protoc_insertion_point(class_scope:bigit.ResList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bigit::ResInfo > res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static ResList* default_instance_;
};
// -------------------------------------------------------------------

class Person_PhoneNumber : public ::google::protobuf::Message {
 public:
  Person_PhoneNumber();
  virtual ~Person_PhoneNumber();

  Person_PhoneNumber(const Person_PhoneNumber& from);

  inline Person_PhoneNumber& operator=(const Person_PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person_PhoneNumber& default_instance();

  void Swap(Person_PhoneNumber* other);

  // implements Message ----------------------------------------------

  Person_PhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person_PhoneNumber& from);
  void MergeFrom(const Person_PhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  inline void set_allocated_number(::std::string* number);

  // optional .bigit.Person.PhoneType type = 2 [default = HOME];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::bigit::Person_PhoneType type() const;
  inline void set_type(::bigit::Person_PhoneType value);

  // @@protoc_insertion_point(class_scope:bigit.Person.PhoneNumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* number_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static Person_PhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Person_PhoneNumber PhoneNumber;

  typedef Person_PhoneType PhoneType;
  static const PhoneType MOBILE = Person_PhoneType_MOBILE;
  static const PhoneType HOME = Person_PhoneType_HOME;
  static const PhoneType WORK = Person_PhoneType_WORK;
  static inline bool PhoneType_IsValid(int value) {
    return Person_PhoneType_IsValid(value);
  }
  static const PhoneType PhoneType_MIN =
    Person_PhoneType_PhoneType_MIN;
  static const PhoneType PhoneType_MAX =
    Person_PhoneType_PhoneType_MAX;
  static const int PhoneType_ARRAYSIZE =
    Person_PhoneType_PhoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhoneType_descriptor() {
    return Person_PhoneType_descriptor();
  }
  static inline const ::std::string& PhoneType_Name(PhoneType value) {
    return Person_PhoneType_Name(value);
  }
  static inline bool PhoneType_Parse(const ::std::string& name,
      PhoneType* value) {
    return Person_PhoneType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // repeated .bigit.Person.PhoneNumber phone = 4;
  inline int phone_size() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 4;
  inline const ::bigit::Person_PhoneNumber& phone(int index) const;
  inline ::bigit::Person_PhoneNumber* mutable_phone(int index);
  inline ::bigit::Person_PhoneNumber* add_phone();
  inline const ::google::protobuf::RepeatedPtrField< ::bigit::Person_PhoneNumber >&
      phone() const;
  inline ::google::protobuf::RepeatedPtrField< ::bigit::Person_PhoneNumber >*
      mutable_phone();

  // @@protoc_insertion_point(class_scope:bigit.Person)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::RepeatedPtrField< ::bigit::Person_PhoneNumber > phone_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class AddressBook : public ::google::protobuf::Message {
 public:
  AddressBook();
  virtual ~AddressBook();

  AddressBook(const AddressBook& from);

  inline AddressBook& operator=(const AddressBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressBook& default_instance();

  void Swap(AddressBook* other);

  // implements Message ----------------------------------------------

  AddressBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressBook& from);
  void MergeFrom(const AddressBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigit.Person person = 1;
  inline int person_size() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 1;
  inline const ::bigit::Person& person(int index) const;
  inline ::bigit::Person* mutable_person(int index);
  inline ::bigit::Person* add_person();
  inline const ::google::protobuf::RepeatedPtrField< ::bigit::Person >&
      person() const;
  inline ::google::protobuf::RepeatedPtrField< ::bigit::Person >*
      mutable_person();

  // @@protoc_insertion_point(class_scope:bigit.AddressBook)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bigit::Person > person_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static AddressBook* default_instance_;
};
// -------------------------------------------------------------------

class SMSInfo : public ::google::protobuf::Message {
 public:
  SMSInfo();
  virtual ~SMSInfo();

  SMSInfo(const SMSInfo& from);

  inline SMSInfo& operator=(const SMSInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSInfo& default_instance();

  void Swap(SMSInfo* other);

  // implements Message ----------------------------------------------

  SMSInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMSInfo& from);
  void MergeFrom(const SMSInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SMSInfo_SMSType SMSType;
  static const SMSType IN = SMSInfo_SMSType_IN;
  static const SMSType OUT = SMSInfo_SMSType_OUT;
  static inline bool SMSType_IsValid(int value) {
    return SMSInfo_SMSType_IsValid(value);
  }
  static const SMSType SMSType_MIN =
    SMSInfo_SMSType_SMSType_MIN;
  static const SMSType SMSType_MAX =
    SMSInfo_SMSType_SMSType_MAX;
  static const int SMSType_ARRAYSIZE =
    SMSInfo_SMSType_SMSType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SMSType_descriptor() {
    return SMSInfo_SMSType_descriptor();
  }
  static inline const ::std::string& SMSType_Name(SMSType value) {
    return SMSInfo_SMSType_Name(value);
  }
  static inline bool SMSType_Parse(const ::std::string& name,
      SMSType* value) {
    return SMSInfo_SMSType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated string numbers = 2;
  inline int numbers_size() const;
  inline void clear_numbers();
  static const int kNumbersFieldNumber = 2;
  inline const ::std::string& numbers(int index) const;
  inline ::std::string* mutable_numbers(int index);
  inline void set_numbers(int index, const ::std::string& value);
  inline void set_numbers(int index, const char* value);
  inline void set_numbers(int index, const char* value, size_t size);
  inline ::std::string* add_numbers();
  inline void add_numbers(const ::std::string& value);
  inline void add_numbers(const char* value);
  inline void add_numbers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& numbers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_numbers();

  // required .bigit.SMSInfo.SMSType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::bigit::SMSInfo_SMSType type() const;
  inline void set_type(::bigit::SMSInfo_SMSType value);

  // @@protoc_insertion_point(class_scope:bigit.SMSInfo)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::std::string> numbers_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static SMSInfo* default_instance_;
};
// -------------------------------------------------------------------

class SMSList : public ::google::protobuf::Message {
 public:
  SMSList();
  virtual ~SMSList();

  SMSList(const SMSList& from);

  inline SMSList& operator=(const SMSList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSList& default_instance();

  void Swap(SMSList* other);

  // implements Message ----------------------------------------------

  SMSList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMSList& from);
  void MergeFrom(const SMSList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigit.SMSInfo sms = 1;
  inline int sms_size() const;
  inline void clear_sms();
  static const int kSmsFieldNumber = 1;
  inline const ::bigit::SMSInfo& sms(int index) const;
  inline ::bigit::SMSInfo* mutable_sms(int index);
  inline ::bigit::SMSInfo* add_sms();
  inline const ::google::protobuf::RepeatedPtrField< ::bigit::SMSInfo >&
      sms() const;
  inline ::google::protobuf::RepeatedPtrField< ::bigit::SMSInfo >*
      mutable_sms();

  // @@protoc_insertion_point(class_scope:bigit.SMSList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::bigit::SMSInfo > sms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_phone_2eproto();
  friend void protobuf_AssignDesc_phone_2eproto();
  friend void protobuf_ShutdownFile_phone_2eproto();

  void InitAsDefaultInstance();
  static SMSList* default_instance_;
};
// ===================================================================


// ===================================================================

// DeviceInfo

// required string name = 1;
inline bool DeviceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeviceInfo::name() const {
  return *name_;
}
inline void DeviceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DeviceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DeviceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DeviceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sn = 2;
inline bool DeviceInfo::has_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfo::set_has_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfo::clear_has_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfo::clear_sn() {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& DeviceInfo::sn() const {
  return *sn_;
}
inline void DeviceInfo::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
}
inline void DeviceInfo::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
}
inline void DeviceInfo::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  return sn_;
}
inline ::std::string* DeviceInfo::release_sn() {
  clear_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cpu = 3;
inline bool DeviceInfo::has_cpu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfo::set_has_cpu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfo::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfo::clear_cpu() {
  if (cpu_ != &::google::protobuf::internal::kEmptyString) {
    cpu_->clear();
  }
  clear_has_cpu();
}
inline const ::std::string& DeviceInfo::cpu() const {
  return *cpu_;
}
inline void DeviceInfo::set_cpu(const ::std::string& value) {
  set_has_cpu();
  if (cpu_ == &::google::protobuf::internal::kEmptyString) {
    cpu_ = new ::std::string;
  }
  cpu_->assign(value);
}
inline void DeviceInfo::set_cpu(const char* value) {
  set_has_cpu();
  if (cpu_ == &::google::protobuf::internal::kEmptyString) {
    cpu_ = new ::std::string;
  }
  cpu_->assign(value);
}
inline void DeviceInfo::set_cpu(const char* value, size_t size) {
  set_has_cpu();
  if (cpu_ == &::google::protobuf::internal::kEmptyString) {
    cpu_ = new ::std::string;
  }
  cpu_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_cpu() {
  set_has_cpu();
  if (cpu_ == &::google::protobuf::internal::kEmptyString) {
    cpu_ = new ::std::string;
  }
  return cpu_;
}
inline ::std::string* DeviceInfo::release_cpu() {
  clear_has_cpu();
  if (cpu_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cpu_;
    cpu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_cpu(::std::string* cpu) {
  if (cpu_ != &::google::protobuf::internal::kEmptyString) {
    delete cpu_;
  }
  if (cpu) {
    set_has_cpu();
    cpu_ = cpu;
  } else {
    clear_has_cpu();
    cpu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string brand = 4;
inline bool DeviceInfo::has_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceInfo::set_has_brand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceInfo::clear_has_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceInfo::clear_brand() {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& DeviceInfo::brand() const {
  return *brand_;
}
inline void DeviceInfo::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void DeviceInfo::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void DeviceInfo::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  return brand_;
}
inline ::std::string* DeviceInfo::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string model = 5;
inline bool DeviceInfo::has_model() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceInfo::set_has_model() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceInfo::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& DeviceInfo::model() const {
  return *model_;
}
inline void DeviceInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void DeviceInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void DeviceInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* DeviceInfo::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string imei = 6;
inline bool DeviceInfo::has_imei() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceInfo::set_has_imei() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceInfo::clear_has_imei() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceInfo::clear_imei() {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& DeviceInfo::imei() const {
  return *imei_;
}
inline void DeviceInfo::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void DeviceInfo::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
}
inline void DeviceInfo::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    imei_ = new ::std::string;
  }
  return imei_;
}
inline ::std::string* DeviceInfo::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mac = 7;
inline bool DeviceInfo::has_mac() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceInfo::set_has_mac() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceInfo::clear_has_mac() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceInfo::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& DeviceInfo::mac() const {
  return *mac_;
}
inline void DeviceInfo::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void DeviceInfo::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void DeviceInfo::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* DeviceInfo::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StorageInfo

// required int32 total = 1;
inline bool StorageInfo::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageInfo::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageInfo::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageInfo::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 StorageInfo::total() const {
  return total_;
}
inline void StorageInfo::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// required int32 free = 2;
inline bool StorageInfo::has_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageInfo::set_has_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageInfo::clear_has_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageInfo::clear_free() {
  free_ = 0;
  clear_has_free();
}
inline ::google::protobuf::int32 StorageInfo::free() const {
  return free_;
}
inline void StorageInfo::set_free(::google::protobuf::int32 value) {
  set_has_free();
  free_ = value;
}

// -------------------------------------------------------------------

// AppInfo

// required string id = 1;
inline bool AppInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AppInfo::id() const {
  return *id_;
}
inline void AppInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AppInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AppInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* AppInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 2;
inline bool AppInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AppInfo::name() const {
  return *name_;
}
inline void AppInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AppInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AppInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AppInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string version = 3;
inline bool AppInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppInfo::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AppInfo::version() const {
  return *version_;
}
inline void AppInfo::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AppInfo::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AppInfo::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppInfo::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* AppInfo::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppInfo::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 4;
inline bool AppInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 AppInfo::size() const {
  return size_;
}
inline void AppInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required int32 location = 5;
inline bool AppInfo::has_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppInfo::set_has_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppInfo::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 AppInfo::location() const {
  return location_;
}
inline void AppInfo::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// required string icodata = 6;
inline bool AppInfo::has_icodata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppInfo::set_has_icodata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppInfo::clear_has_icodata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppInfo::clear_icodata() {
  if (icodata_ != &::google::protobuf::internal::kEmptyString) {
    icodata_->clear();
  }
  clear_has_icodata();
}
inline const ::std::string& AppInfo::icodata() const {
  return *icodata_;
}
inline void AppInfo::set_icodata(const ::std::string& value) {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  icodata_->assign(value);
}
inline void AppInfo::set_icodata(const char* value) {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  icodata_->assign(value);
}
inline void AppInfo::set_icodata(const char* value, size_t size) {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  icodata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppInfo::mutable_icodata() {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  return icodata_;
}
inline ::std::string* AppInfo::release_icodata() {
  clear_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icodata_;
    icodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppInfo::set_allocated_icodata(::std::string* icodata) {
  if (icodata_ != &::google::protobuf::internal::kEmptyString) {
    delete icodata_;
  }
  if (icodata) {
    set_has_icodata();
    icodata_ = icodata;
  } else {
    clear_has_icodata();
    icodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AppList

// repeated .bigit.AppInfo app = 1;
inline int AppList::app_size() const {
  return app_.size();
}
inline void AppList::clear_app() {
  app_.Clear();
}
inline const ::bigit::AppInfo& AppList::app(int index) const {
  return app_.Get(index);
}
inline ::bigit::AppInfo* AppList::mutable_app(int index) {
  return app_.Mutable(index);
}
inline ::bigit::AppInfo* AppList::add_app() {
  return app_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigit::AppInfo >&
AppList::app() const {
  return app_;
}
inline ::google::protobuf::RepeatedPtrField< ::bigit::AppInfo >*
AppList::mutable_app() {
  return &app_;
}

// -------------------------------------------------------------------

// ResInfo

// required string path = 1;
inline bool ResInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ResInfo::path() const {
  return *path_;
}
inline void ResInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ResInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ResInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ResInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResInfo::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 2;
inline bool ResInfo::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResInfo::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 ResInfo::size() const {
  return size_;
}
inline void ResInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required string icodata = 3;
inline bool ResInfo::has_icodata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResInfo::set_has_icodata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResInfo::clear_has_icodata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResInfo::clear_icodata() {
  if (icodata_ != &::google::protobuf::internal::kEmptyString) {
    icodata_->clear();
  }
  clear_has_icodata();
}
inline const ::std::string& ResInfo::icodata() const {
  return *icodata_;
}
inline void ResInfo::set_icodata(const ::std::string& value) {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  icodata_->assign(value);
}
inline void ResInfo::set_icodata(const char* value) {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  icodata_->assign(value);
}
inline void ResInfo::set_icodata(const char* value, size_t size) {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  icodata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResInfo::mutable_icodata() {
  set_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    icodata_ = new ::std::string;
  }
  return icodata_;
}
inline ::std::string* ResInfo::release_icodata() {
  clear_has_icodata();
  if (icodata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icodata_;
    icodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResInfo::set_allocated_icodata(::std::string* icodata) {
  if (icodata_ != &::google::protobuf::internal::kEmptyString) {
    delete icodata_;
  }
  if (icodata) {
    set_has_icodata();
    icodata_ = icodata;
  } else {
    clear_has_icodata();
    icodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string createdate = 4;
inline bool ResInfo::has_createdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResInfo::set_has_createdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResInfo::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResInfo::clear_createdate() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    createdate_->clear();
  }
  clear_has_createdate();
}
inline const ::std::string& ResInfo::createdate() const {
  return *createdate_;
}
inline void ResInfo::set_createdate(const ::std::string& value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void ResInfo::set_createdate(const char* value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void ResInfo::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResInfo::mutable_createdate() {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  return createdate_;
}
inline ::std::string* ResInfo::release_createdate() {
  clear_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdate_;
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResInfo::set_allocated_createdate(::std::string* createdate) {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (createdate) {
    set_has_createdate();
    createdate_ = createdate;
  } else {
    clear_has_createdate();
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 duration = 5;
inline bool ResInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResInfo::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResInfo::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 ResInfo::duration() const {
  return duration_;
}
inline void ResInfo::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
}

// optional string author = 6;
inline bool ResInfo::has_author() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResInfo::set_has_author() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResInfo::clear_has_author() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResInfo::clear_author() {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    author_->clear();
  }
  clear_has_author();
}
inline const ::std::string& ResInfo::author() const {
  return *author_;
}
inline void ResInfo::set_author(const ::std::string& value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void ResInfo::set_author(const char* value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void ResInfo::set_author(const char* value, size_t size) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResInfo::mutable_author() {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  return author_;
}
inline ::std::string* ResInfo::release_author() {
  clear_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = author_;
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResInfo::set_allocated_author(::std::string* author) {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (author) {
    set_has_author();
    author_ = author;
  } else {
    clear_has_author();
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string format = 7;
inline bool ResInfo::has_format() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResInfo::set_has_format() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResInfo::clear_has_format() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResInfo::clear_format() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    format_->clear();
  }
  clear_has_format();
}
inline const ::std::string& ResInfo::format() const {
  return *format_;
}
inline void ResInfo::set_format(const ::std::string& value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(value);
}
inline void ResInfo::set_format(const char* value) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(value);
}
inline void ResInfo::set_format(const char* value, size_t size) {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResInfo::mutable_format() {
  set_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    format_ = new ::std::string;
  }
  return format_;
}
inline ::std::string* ResInfo::release_format() {
  clear_has_format();
  if (format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = format_;
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResInfo::set_allocated_format(::std::string* format) {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (format) {
    set_has_format();
    format_ = format;
  } else {
    clear_has_format();
    format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResList

// repeated .bigit.ResInfo res = 1;
inline int ResList::res_size() const {
  return res_.size();
}
inline void ResList::clear_res() {
  res_.Clear();
}
inline const ::bigit::ResInfo& ResList::res(int index) const {
  return res_.Get(index);
}
inline ::bigit::ResInfo* ResList::mutable_res(int index) {
  return res_.Mutable(index);
}
inline ::bigit::ResInfo* ResList::add_res() {
  return res_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigit::ResInfo >&
ResList::res() const {
  return res_;
}
inline ::google::protobuf::RepeatedPtrField< ::bigit::ResInfo >*
ResList::mutable_res() {
  return &res_;
}

// -------------------------------------------------------------------

// Person_PhoneNumber

// required string number = 1;
inline bool Person_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person_PhoneNumber::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& Person_PhoneNumber::number() const {
  return *number_;
}
inline void Person_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void Person_PhoneNumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void Person_PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person_PhoneNumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* Person_PhoneNumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Person_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    delete number_;
  }
  if (number) {
    set_has_number();
    number_ = number;
  } else {
    clear_has_number();
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .bigit.Person.PhoneType type = 2 [default = HOME];
inline bool Person_PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person_PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person_PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person_PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::bigit::Person_PhoneType Person_PhoneNumber::type() const {
  return static_cast< ::bigit::Person_PhoneType >(type_);
}
inline void Person_PhoneNumber::set_type(::bigit::Person_PhoneType value) {
  assert(::bigit::Person_PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Person

// required string name = 1;
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Person::name() const {
  return *name_;
}
inline void Person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 2;
inline bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Person::id() const {
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string email = 3;
inline bool Person::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Person::email() const {
  return *email_;
}
inline void Person::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Person::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Person::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Person::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Person::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Person::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .bigit.Person.PhoneNumber phone = 4;
inline int Person::phone_size() const {
  return phone_.size();
}
inline void Person::clear_phone() {
  phone_.Clear();
}
inline const ::bigit::Person_PhoneNumber& Person::phone(int index) const {
  return phone_.Get(index);
}
inline ::bigit::Person_PhoneNumber* Person::mutable_phone(int index) {
  return phone_.Mutable(index);
}
inline ::bigit::Person_PhoneNumber* Person::add_phone() {
  return phone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigit::Person_PhoneNumber >&
Person::phone() const {
  return phone_;
}
inline ::google::protobuf::RepeatedPtrField< ::bigit::Person_PhoneNumber >*
Person::mutable_phone() {
  return &phone_;
}

// -------------------------------------------------------------------

// AddressBook

// repeated .bigit.Person person = 1;
inline int AddressBook::person_size() const {
  return person_.size();
}
inline void AddressBook::clear_person() {
  person_.Clear();
}
inline const ::bigit::Person& AddressBook::person(int index) const {
  return person_.Get(index);
}
inline ::bigit::Person* AddressBook::mutable_person(int index) {
  return person_.Mutable(index);
}
inline ::bigit::Person* AddressBook::add_person() {
  return person_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigit::Person >&
AddressBook::person() const {
  return person_;
}
inline ::google::protobuf::RepeatedPtrField< ::bigit::Person >*
AddressBook::mutable_person() {
  return &person_;
}

// -------------------------------------------------------------------

// SMSInfo

// required string content = 1;
inline bool SMSInfo::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMSInfo::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMSInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMSInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SMSInfo::content() const {
  return *content_;
}
inline void SMSInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SMSInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SMSInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SMSInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SMSInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SMSInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string numbers = 2;
inline int SMSInfo::numbers_size() const {
  return numbers_.size();
}
inline void SMSInfo::clear_numbers() {
  numbers_.Clear();
}
inline const ::std::string& SMSInfo::numbers(int index) const {
  return numbers_.Get(index);
}
inline ::std::string* SMSInfo::mutable_numbers(int index) {
  return numbers_.Mutable(index);
}
inline void SMSInfo::set_numbers(int index, const ::std::string& value) {
  numbers_.Mutable(index)->assign(value);
}
inline void SMSInfo::set_numbers(int index, const char* value) {
  numbers_.Mutable(index)->assign(value);
}
inline void SMSInfo::set_numbers(int index, const char* value, size_t size) {
  numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SMSInfo::add_numbers() {
  return numbers_.Add();
}
inline void SMSInfo::add_numbers(const ::std::string& value) {
  numbers_.Add()->assign(value);
}
inline void SMSInfo::add_numbers(const char* value) {
  numbers_.Add()->assign(value);
}
inline void SMSInfo::add_numbers(const char* value, size_t size) {
  numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SMSInfo::numbers() const {
  return numbers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SMSInfo::mutable_numbers() {
  return &numbers_;
}

// required .bigit.SMSInfo.SMSType type = 3;
inline bool SMSInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMSInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMSInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMSInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::bigit::SMSInfo_SMSType SMSInfo::type() const {
  return static_cast< ::bigit::SMSInfo_SMSType >(type_);
}
inline void SMSInfo::set_type(::bigit::SMSInfo_SMSType value) {
  assert(::bigit::SMSInfo_SMSType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// SMSList

// repeated .bigit.SMSInfo sms = 1;
inline int SMSList::sms_size() const {
  return sms_.size();
}
inline void SMSList::clear_sms() {
  sms_.Clear();
}
inline const ::bigit::SMSInfo& SMSList::sms(int index) const {
  return sms_.Get(index);
}
inline ::bigit::SMSInfo* SMSList::mutable_sms(int index) {
  return sms_.Mutable(index);
}
inline ::bigit::SMSInfo* SMSList::add_sms() {
  return sms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigit::SMSInfo >&
SMSList::sms() const {
  return sms_;
}
inline ::google::protobuf::RepeatedPtrField< ::bigit::SMSInfo >*
SMSList::mutable_sms() {
  return &sms_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bigit

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bigit::Person_PhoneType>() {
  return ::bigit::Person_PhoneType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bigit::SMSInfo_SMSType>() {
  return ::bigit::SMSInfo_SMSType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_phone_2eproto__INCLUDED
